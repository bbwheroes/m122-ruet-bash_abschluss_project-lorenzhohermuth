#!/bin/bash

version="0.1.0"

bin_path=$(readlink -f ${BASH_SOURCE[0]})
root_path=$(echo "$bin_path" | sed 's|\(.*\)/.*|\1|')

blue='\033[0;34m'
no_color='\033[0m'

create_command () {
	cmd_path="$root_path/cmd/$1"
	log_path="$root_path/cmd/stats/$1.log"
	link_path="$root_path/cmd/sym-links/$1-link"

	sudo touch $cmd_path
	chmod o+rx $cmd_path

	echo "#!/bin/bash" > $cmd_path
	echo "echo \"$version \$(date +%Y-%m-%d-%H-%M-%S) \$(whoami) \" >> $log_path" >> $cmd_path
	echo "bash $link_path \$@" >> $cmd_path

	sudo touch $log_path
	chmod o+rw $log_path
}

delete_command () {
	cmd_path="$root_path/cmd/$1"
	log_path="$root_path/cmd/stats/$1.log"
	link_path="$root_path/cmd/sym-links/$1-link"

	rm $cmd_path
	rm $log_path
	rm $link_path
}

print_stats () {
	command_name=$1
	highest_usage=0
	file_path="$root_path/cmd/stats/$command_name.log"
	declare -A statsmap
	while IFS= read -r line ; do
		raw_timestamp=$(awk '{print $2}' <<< "$line")
		user=$(awk '{print $3}' <<< "$line")

		timestamp=${raw_timestamp:0:10}

		statsmap["$timestamp"]=$(( ${statsmap["$timestamp"]} + 1 ))
		if [ ${statsmap["$timestamp"]} -gt $highest_usage ]; then
			highest_usage=${statsmap["$timestamp"]}
		fi
	done < "$file_path"

	multiplier=1000 # because on smaller number then 1 it gets converted to 0
	length_of_date=10
	
	columns_free=$(( $(tput cols) - length_of_date - 2))
	squares_per_usage=$(( columns_free * multiplier / highest_usage ))


	axies="0"
	for iu in $(seq 1 $(( columns_free - $(expr length $highest_usage) - 1 )) ); do
		axies="${axies}-"
	done
	axies="$axies$highest_usage"
		
	echo "command: $command_name"
	echo "usage:     $axies"
	
	for date in "${!statsmap[@]}" ; do
		amout=${statsmap["$date"]}
		squares=""
		for i in $(seq 1 $(( $amout * $squares_per_usage / $multiplier))); do
			squares="$squaresâ– "
		done
		echo "$date $squares"
	done
}

while test -n "$1"; do
	case $1 in
		-h|--help)
			cat << EOF
Usage: sts [-h|--help] <command>
Install:
	./sts install
	sts uninstall
Commands:
	sts new <command-name> ./your-file.sh
	sts remove <command-name>
	sts stats <command-name>
EOF
			;;
		
		-v|--version)
			echo "sts version $version"
			;;

		new)
			command_name=$2
			bash_file=$3
			ln -sf "$(pwd)/$bash_file" "$root_path/cmd/sym-links/$command_name-link"
			create_command $command_name
			shift; shift
			;;

		remove)
			delete_command $2
			shift
			;;

		stats)
			command_name=$2
			if [ -z "$command_name" ]; then
				echo "sts: No command name specified for stats"
			else
				print_stats $command_name
			fi

			shift
			;;

		refresh)
			command_name=$2
			bash_file=$3
			delete_command $command_name
			ln -sf "$(pwd)/$bash_file" "$root_path/cmd/sym-links/$command_name-link"
			create_command $command_name
			shift; shift
			;;

		install)
			mkdir -p /usr/local/lib/sts/cmd/sym-links
			echo "[1] created directory /usr/local/lib/sts/cmd/sym-links"

			mkdir -p /usr/local/lib/sts/cmd/stats
			echo "[2] created directory /usr/local/lib/sts/cmd/stats"

			cp $bin_path /usr/local/lib/sts/sts
			echo "[3] Copied sts to /usr/local/lib/sts"

			ln -s /usr/local/lib/sts/sts /usr/local/bin/sts
			echo "[4] created symlink from /usr/local/lib/sts/sts to /usr/local/bin/sts"

			echo -e "${blue}[5] Add: export PATH=\$PATH:\"...:/usr/local/lib/sts/cmd\" to your .bashrc or .zshrc file${no_color}"
			;;

		uninstall)
			rm -rf /usr/local/lib/sts
			echo "[1] Removed sts from /usr/local/lib/sts"

			rm /usr/local/bin/sts
			echo "[2] removed symlink from /usr/local/bin/sts"

			echo -e "${blue}[3] remove: export PATH=\$PATH:\"...:/usr/local/lib/sts/cmd\" from your .bashrc or .zshrc file${no_color}"
			;;

		*)
			echo "sts: Unknown command: $1"
			;;
	esac
	shift
done
